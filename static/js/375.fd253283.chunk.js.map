{"version":3,"file":"static/js/375.fd253283.chunk.js","mappings":"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","sources":["components/Cast.js","pages/DetailsPage.js"],"sourcesContent":["import React, { useEffect, useState, lazy, Suspense } from \"react\"\r\nimport styled from \"styled-components\"\r\nimport { nanoid } from \"nanoid\"\r\nimport { SearchPage } from \"../composition/SearchPage\"\r\n\r\n// const SearchPage = React.lazy(() =>\r\n//   import(\"../composition/SearchPage\").then((module) => ({\r\n//     default: module.SearchPage,\r\n//   }))\r\n// )\r\n\r\nconst Aside = styled.aside`\r\n  border: 5px solid black;\r\n  padding: 3rem 0;\r\n  background-image: url(../images/fancy-pants.jpg);\r\n  //   flex: 1;\r\n  //   height: 550px;\r\n`\r\n\r\nconst Profiles = styled.div`\r\n  width: 95%;\r\n  margin: 0 auto;\r\n  display: grid;\r\n  grid-template-columns: repeat(auto-fill, minmax(150px, 1fr));\r\n  grid-row-gap: 2em;\r\n  grid-column-gap: 4em;\r\n`\r\nconst ActorCont = styled.div`\r\n  height: 250px;\r\n  display: grid;\r\n  max-width: 230px;\r\n  grid-template-rows: 2fr 1fr;\r\n  border-radius: ${({ theme }) => theme.border};\r\n  overflow: hidden;\r\n  border: 3px solid white;\r\n`\r\nconst StyledImage = styled.img`\r\n  object-fit: cover;\r\n  max-width: 100%;\r\n  display: block;\r\n`\r\nconst ProfileRole = styled.div`\r\n  background: white;\r\n  color: ${({ theme }) => theme.darkBg};\r\n  padding: 0 1em;\r\n  text-align: center;\r\n`\r\n\r\nexport default function Cast({ movieId, mediaType }) {\r\n  const [isLoading, setIsLoading] = useState(false)\r\n  const [success, setSuccess] = useState(false)\r\n  const [castData, setCastData] = useState([])\r\n  useEffect(() => {\r\n    const fetchCastUrl = `https://api.themoviedb.org/3/${mediaType}/${movieId}/credits?api_key=${process.env.REACT_APP_API_KEY}&language=en-US`\r\n    setIsLoading(true)\r\n    fetch(fetchCastUrl)\r\n      .then((res) => {\r\n        if (!res.ok) {\r\n          throw new Error(res.status)\r\n        } else {\r\n          return res.json()\r\n        }\r\n      })\r\n      .then((data) => {\r\n        setSuccess(true)\r\n        setIsLoading(false)\r\n        setCastData(data.cast.slice(0, 12))\r\n      })\r\n      .catch((err) => {\r\n        setSuccess(false)\r\n        setIsLoading(false)\r\n        console.error(err)\r\n      })\r\n  }, [movieId, mediaType])\r\n  const profiles =\r\n    castData &&\r\n    castData.map((castMember) => {\r\n      return (\r\n        <ActorCont key={nanoid()}>\r\n          <StyledImage\r\n            height={\"170px\"}\r\n            width={\"100%\"}\r\n            loading={\"lazy\"}\r\n            src={`${\r\n              castMember?.profile_path\r\n                ? `https://image.tmdb.org/t/p/h632/${castMember?.profile_path}`\r\n                : \"../images/no-photo.png\"\r\n            }`}\r\n          />\r\n          <ProfileRole>\r\n            <p>\r\n              {castMember?.name} <span>{castMember?.character}</span>\r\n            </p>\r\n          </ProfileRole>\r\n        </ActorCont>\r\n      )\r\n    })\r\n  return (\r\n    <>\r\n      <Aside>\r\n        <h2>Cast</h2>\r\n        <Profiles>{profiles}</Profiles>\r\n      </Aside>\r\n      <SearchPage\r\n        url={`https://api.themoviedb.org/3/${mediaType}/${movieId}/similar?api_key=${process.env.REACT_APP_API_KEY}&language=en-US&page=1`}\r\n        redirected={false}\r\n        category={true}\r\n      >\r\n        <h3>you may also like</h3>\r\n      </SearchPage>\r\n    </>\r\n  )\r\n}\r\n","import React, { useEffect, useState } from \"react\"\r\nimport { useLocation } from \"react-router-dom\"\r\nimport YouTube from \"react-youtube\"\r\nimport styled from \"styled-components\"\r\nimport { nanoid } from \"nanoid\"\r\nimport Cast from \"../components/Cast\"\r\n\r\nconst Main = styled.main`\r\n  padding-top: 5rem;\r\n`\r\n\r\nconst DivBKDrop = styled.article`\r\n  min-height: 100vh;\r\n  padding-top: 5em;\r\n  width: 100%;\r\n  display: flex;\r\n  justify-content: center;\r\n  background: rgb(32, 32, 38);\r\n  background-size: cover;\r\n  background-position: center;\r\n`\r\n\r\nconst PosterCont = styled.div`\r\n  width: 200px;\r\n  display: flex;\r\n  flex-direction: column;\r\n  gap: 2em;\r\n`\r\n\r\nconst DivPoster = styled.div`\r\n  height: 350px;\r\n  border-radius: ${({ theme }) => theme.border};\r\n  background: black;\r\n  background-size: cover;\r\n  background-position: center;\r\n  width: 100%;\r\n`\r\n\r\nconst ContainerDiv = styled.div`\r\n  width: 95%;\r\n  margin: 0 auto;\r\n  display: flex;\r\n  gap: 5em;\r\n`\r\nconst Button = styled.button`\r\n  padding: 1em 3em;\r\n  background-color: orange;\r\n  color: white;\r\n  border-radius: ${({ theme }) => theme.border};\r\n  border: none;\r\n  width: 100%;\r\n`\r\nconst InfoCont = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n  gap: 0.8em;\r\n  justify-content: flex-start;\r\n  align-items: baseline;\r\n  flex: 2;\r\n`\r\n\r\nconst Ul = styled.ul`\r\n  padding: 0;\r\n  display: flex;\r\n  gap: 1em;\r\n  list-style: none;\r\n  margin: 0;\r\n`\r\n\r\nconst LoadingDiv = styled.div`\r\n  background-image: url(../images/niceload.webp);\r\n  background-size: contain;\r\n  background-repeat: no-repeat;\r\n  height: 350px;\r\n`\r\n\r\nexport default function DetailsPage() {\r\n  const [detailsData, setDetailsData] = useState(null)\r\n  const trailer = detailsData?.videos?.results.find((video) =>\r\n    video.name.toLowerCase().includes(\"trailer\")\r\n  )\r\n  const location = useLocation()\r\n  const bkdrp = `${\r\n    detailsData?.backdrop_path\r\n      ? `https://image.tmdb.org/t/p/original/${detailsData.backdrop_path}`\r\n      : null\r\n  }`\r\n  const postr = `${\r\n    detailsData?.poster_path\r\n      ? `https://image.tmdb.org/t/p/w500/${detailsData.poster_path}`\r\n      : null\r\n  }`\r\n  const [isLoading, setIsLoading] = useState(false)\r\n  const [success, setSuccess] = useState(false)\r\n  const opts = {\r\n    height: \"300\",\r\n    width: \"400\",\r\n    playerVars: {\r\n      autoplay: 1,\r\n    },\r\n  }\r\n  const bgStyle = {\r\n    backgroundImage: `linear-gradient(90deg, rgba(32,32,38,0.75) 0%, rgba(1,11,19,1) 100%), url(${bkdrp})`,\r\n  }\r\n  const posterBg = {\r\n    backgroundImage: `url(${postr && postr})`,\r\n  }\r\n  const genreList = detailsData?.genres.map((genre) => (\r\n    <li key={nanoid()}>{genre.name}</li>\r\n  ))\r\n  const productionCompanies =\r\n    detailsData?.production_companies &&\r\n    detailsData.production_companies.map((company) => (\r\n      <li\r\n        key={nanoid()}\r\n        style={{\r\n          backgroundImage: `url(https://image.tmdb.org/t/p/w45/${company?.logo_path})`,\r\n          backgroundPosition: \"center\",\r\n          backgroundRepeat: \"no-repeat\",\r\n          backgroundSize: \"contain\",\r\n          height: \"30px\",\r\n          width: \"30px\",\r\n          display: `${company?.logo_path ? \"initial\" : \"none\"}`,\r\n        }}\r\n      ></li>\r\n    ))\r\n  const movieId = detailsData?.id\r\n  const mediaType = detailsData?.release_date ? \"movie\" : \"tv\"\r\n  function _onReady(e) {\r\n    e.target.pauseVideo()\r\n  }\r\n  useEffect(() => {\r\n    window.scrollTo(0, 0)\r\n    setIsLoading(true)\r\n    fetch(location?.state?.detailsUrl)\r\n      .then((res) => {\r\n        if (!res.ok) {\r\n          throw new Error(res.status)\r\n        } else {\r\n          return res.json()\r\n        }\r\n      })\r\n      .then((data) => {\r\n        setSuccess(true)\r\n        setDetailsData(data)\r\n        setIsLoading(false)\r\n      })\r\n      .catch((err) => {\r\n        setSuccess(false)\r\n        console.error(err)\r\n        setIsLoading(false)\r\n      })\r\n  }, [location.pathname, location.state])\r\n\r\n  return (\r\n    <Main>\r\n      {isLoading ? (\r\n        <LoadingDiv />\r\n      ) : (\r\n        <>\r\n          <DivBKDrop style={bgStyle}>\r\n            <ContainerDiv>\r\n              <PosterCont>\r\n                {isLoading ? (\r\n                  <LoadingDiv />\r\n                ) : (\r\n                  <DivPoster style={posterBg}></DivPoster>\r\n                )}\r\n                <Button>Watch Trailer</Button>\r\n              </PosterCont>\r\n              <InfoCont>\r\n                <h1>\r\n                  {detailsData?.title ? detailsData?.title : detailsData?.name}\r\n                </h1>\r\n                {detailsData?.tagline && <p>{detailsData.tagline}</p>}\r\n                {detailsData?.release_date && (\r\n                  <p>{detailsData.release_date.slice(0, 4)}</p>\r\n                )}\r\n                {detailsData?.production_companies?.length >= 1 && (\r\n                  <Ul>{productionCompanies}</Ul>\r\n                )}\r\n                {genreList && <Ul>{genreList}</Ul>}\r\n                <p style={{ maxWidth: \"600px\" }}>{detailsData?.overview}</p>\r\n              </InfoCont>\r\n              {/* {trailer?.key && <YouTube videoId={trailer?.key} opts={opts} />} */}\r\n            </ContainerDiv>\r\n          </DivBKDrop>\r\n          {mediaType && movieId ? (\r\n            <Cast movieId={movieId} mediaType={mediaType} />\r\n          ) : null}\r\n        </>\r\n      )}\r\n    </Main>\r\n  )\r\n}\r\n"],"names":["Aside","styled","Profiles","ActorCont","theme","border","StyledImage","ProfileRole","darkBg","Cast","movieId","mediaType","useState","setIsLoading","setSuccess","castData","setCastData","useEffect","fetchCastUrl","process","fetch","then","res","ok","json","Error","status","data","cast","slice","catch","err","console","error","profiles","map","castMember","height","width","loading","src","profile_path","name","character","nanoid","SearchPage","url","redirected","category","Main","DivBKDrop","PosterCont","DivPoster","ContainerDiv","Button","InfoCont","Ul","LoadingDiv","DetailsPage","detailsData","setDetailsData","location","videos","results","find","video","toLowerCase","includes","useLocation","bkdrp","backdrop_path","postr","poster_path","isLoading","bgStyle","backgroundImage","posterBg","genreList","genres","genre","productionCompanies","production_companies","company","style","logo_path","backgroundPosition","backgroundRepeat","backgroundSize","display","id","release_date","window","scrollTo","state","detailsUrl","pathname","title","tagline","length","maxWidth","overview"],"sourceRoot":""}